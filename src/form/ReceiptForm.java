/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package form;

import communication.Communication;
import domain.ItemUpdateAction;
import domain.Medicine;
import domain.Patient;
import domain.Pharmacist;
import domain.Receipt;
import domain.ReceiptItem;
import domain.SaleStatistics;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import logic.DetailsType;
import model.MyMedicineModel;
import model.MyReceipItemModel;
import session.MySession;

/**
 *
 * @author Andrija - PC
 */
public class ReceiptForm extends javax.swing.JDialog {
DetailsType logic;
Pharmacist logged;
Receipt receipt; 
List<ReceiptItem> newItems;
List<ReceiptItem> oldItems;
int quantity=0;
int rowm = -1;
String querySearch="";
    /**
     * Creates new form ReceiptForm
     */
    public ReceiptForm(java.awt.Frame parent, boolean modal,Receipt receipt,Pharmacist logged,DetailsType logic) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        newItems = new ArrayList<>();
        oldItems = new ArrayList<>();
        this.logic=logic;
        this.logged = logged;
        this.receipt = receipt;
        this.receipt.setPharmacist(logged);
        if(logic.equals(DetailsType.VIEW)){
        Receipt ROLD = (Receipt) MySession.getInstance().getValue("my_receipt");
        try {
        Receipt rx = Communication.getInstance().getReceipt(ROLD);
        oldItems = rx.getItems();
        } catch (Exception ex) {
        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        populateCOmboPatients();
        prepareForm();
        populateTableMedicinesInConst();
        populateTblMedicine();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboPatient = new javax.swing.JComboBox<>();
        lblCreated = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTotalAmount = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        brnAdd = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtStock = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtJKL = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        txtPharmacist = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        comboFO = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMedicines = new javax.swing.JTable();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Pharmacist:");

        jLabel2.setText("Patient:");

        lblCreated.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jLabel4.setText("Total amount:");

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblItems);

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel3.setText("Medicine:");

        jLabel6.setText("JKL:");

        jLabel7.setText("Price");

        jLabel8.setText("Quantity:");

        txtName.setEditable(false);

        txtPrice.setEditable(false);

        brnAdd.setText("Add");
        brnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brnAddActionPerformed(evt);
            }
        });

        jLabel9.setText("On stock:");

        txtStock.setEditable(false);

        jLabel5.setText("Naziv:");

        txtJKL.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7)
                        .addComponent(jLabel9)))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(txtQuantity)
                            .addComponent(txtJKL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(txtStock, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(brnAdd))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brnAdd)
                    .addComponent(jLabel6)
                    .addComponent(txtJKL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel10.setText("FO:");

        comboFO.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "all", "gastrorezistentna_tableta", "gastrorezistentna_kapsula_tvrda", "tableta", "film_tableta", "kapsula_tvrda", "sirup", "oralna_suspenzija", "rastvor_za_injekciju", "rastvor_za_injekciju_u_ulosku", "mast" }));
        comboFO.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboFOItemStateChanged(evt);
            }
        });

        tblMedicines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMedicines.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblMedicinesMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblMedicines);

        lblSearch.setText("Search by name:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTotalAmount)
                            .addComponent(txtPharmacist, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 545, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(lblCreated, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(comboPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(comboFO, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(59, 59, 59)
                                .addComponent(lblSearch)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch))
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRemove)
                            .addComponent(btnSave)
                            .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtPharmacist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblCreated, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(comboPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(btnRemove))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(comboFO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void brnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brnAddActionPerformed
        MyReceipItemModel model = (MyReceipItemModel) tblItems.getModel();
        MyMedicineModel modelM = (MyMedicineModel)tblMedicines.getModel();
        Medicine m = modelM.getMedicine(rowm);
        if(txtQuantity.getText().equals("") || txtQuantity.getText().equals("0")){
            JOptionPane.showMessageDialog(this, "ERROR!\n Please enter the quantity.", "", JOptionPane.ERROR_MESSAGE);        
            return;
        }    
        quantity = Integer.parseInt(txtQuantity.getText());
        if(!checkQuantity(quantity,m)){
            JOptionPane.showMessageDialog(this, "ERROR!\n Choosen medicine is not available", "", JOptionPane.ERROR_MESSAGE);        
            return;
        }
        ReceiptItem item = new ReceiptItem(new Receipt(),null, Long.valueOf((model.getItems().size()+1)+""), quantity, m.getCena_leka_na_veliko_za_pakovanje(), m);
        if(model.updateItem(item, quantity)){
            model.fireTableDataChanged();
        }else{
        model.add(item);
        }
        receipt.setTotal_amount(receipt.getTotal_amount()+(item.getPrice()*quantity));
        txtTotalAmount.setText(receipt.getTotal_amount()+"");
        modelM.fireTableDataChanged();
    }//GEN-LAST:event_brnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int row = tblItems.getSelectedRow();
        if(row==-1){JOptionPane.showMessageDialog(this, "You must select one item.", "", JOptionPane.ERROR_MESSAGE); 
        return;
       }
        MyReceipItemModel model = (MyReceipItemModel)tblItems.getModel();
        MyMedicineModel modelM = (MyMedicineModel)tblMedicines.getModel();
        ReceiptItem item = model.getItem(row);
        receipt.setTotal_amount(receipt.getTotal_amount()-(item.getPrice()*item.getAmount()));
        txtTotalAmount.setText(receipt.getTotal_amount()+"");
        model.remove(row);
        updateOrderNo();
        modelM.fireTableDataChanged();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
    try {
        newItems = ((MyReceipItemModel)tblItems.getModel()).getItems();
        List<Medicine> medicines = Communication.getInstance().getMedicines("");
        if(logic.equals(DetailsType.ADD) && updateMedicineQuantity(newItems,medicines)){
            JOptionPane.showMessageDialog(this, "Not enough on stock.");
            return;
        }
        receipt.setItems(newItems);
        receipt.setPatient((Patient) comboPatient.getSelectedItem());
        if(logic.equals(DetailsType.ADD)){
        Communication.getInstance().addReceipt(receipt);
        handleSaleStat(newItems);
        }else {
            newItems = checkForAdded(newItems);
            newItems = checkForDeleted(newItems);
            System.out.println("KOOONACNOOO"+receipt.getItems());
            Communication.getInstance().editReceipt(receipt);
        }
        JOptionPane.showMessageDialog(this, "Success", "", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    } catch (Exception ex) {
        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
    }
    
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void tblMedicinesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMedicinesMousePressed
        rowm = tblMedicines.getSelectedRow();
        MyMedicineModel modelM = (MyMedicineModel)tblMedicines.getModel();
        Medicine m = modelM.getMedicine(rowm);
        txtJKL.setText(m.getJKL()+"");
        txtName.setText(m.getZasticeno_ime());
        txtPrice.setText(m.getCena_leka_na_veliko_za_pakovanje()+"");
        txtStock.setText(m.getQuantity()+"");
    }//GEN-LAST:event_tblMedicinesMousePressed

    private void comboFOItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboFOItemStateChanged
        populateTableMedicines();
    }//GEN-LAST:event_comboFOItemStateChanged

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        querySearch = txtSearch.getText();
        populateTableMedicinesBySearch(querySearch);
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> comboFO;
    private javax.swing.JComboBox<Object> comboPatient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCreated;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JTable tblItems;
    private javax.swing.JTable tblMedicines;
    private javax.swing.JTextField txtJKL;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPharmacist;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtStock;
    private javax.swing.JTextField txtTotalAmount;
    // End of variables declaration//GEN-END:variables

    private void populateCOmboPatients() {
    try {
            List<Patient> patients = Communication.getInstance().getPatients();
            for(Patient p: patients){
                comboPatient.addItem(p);
            }
    } catch (Exception ex) {
        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    
    private void populateTableMedicinesBySearch(String query) {
        comboFO.setSelectedItem(null);
        if(query.isEmpty() || query==null || query.equals("")) {
            query= "";
        }else query = " WHERE zasticeno_ime='"+query+"'";
    try {
        List<Medicine> medicines = Communication.getInstance().getMedicines(query);
        tblMedicines.setModel(new MyMedicineModel(medicines));
        if(rowm!=-1){
            txtStock.setText(medicines.get(rowm).getQuantity()+"");
        }
    } catch (Exception ex) {
        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    private void populateTableMedicines() {
        String query;
        System.out.println(querySearch);
        if(comboFO.getSelectedItem() == null) {
            query="";
        }else if(comboFO.getSelectedItem().equals("all")) {
            query="";
            querySearch="";
        }else query = " WHERE FO='"+comboFO.getSelectedItem()+"'";
        
        if(!querySearch.equals("")){
            query = " WHERE zasticeno_ime='"+querySearch+"'";
        }
    try {
        List<Medicine> medicinesDB = Communication.getInstance().getMedicines(query);
        tblMedicines.setModel(new MyMedicineModel(medicinesDB));
        if(rowm!=-1){
            txtStock.setText(medicinesDB.get(rowm).getQuantity()+"");
        }
    } catch (Exception ex) {
        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    
    private void populateTableMedicinesInConst(){
    try {
        List<Medicine> medicinesDB = Communication.getInstance().getMedicines("");
        tblMedicines.setModel(new MyMedicineModel(medicinesDB));
    } catch (Exception ex) {
        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
    }
    }

    private void prepareForm() {
        comboFO.setSelectedItem(null);
        txtTotalAmount.setText(receipt.getTotal_amount()+"");
        txtPharmacist.setEditable(false);
        txtPrice.setEditable(false);
        txtName.setEditable(false);
        txtTotalAmount.setEditable(false);
        txtPharmacist.setText(logged.toString());
        lblCreated.setText(LocalDate.now().toString());
        this.receipt.setDate(new Date());
        tblMedicines.setModel(new MyMedicineModel());
        if(logic.equals(DetailsType.ADD)){
            tblItems.setModel(new MyReceipItemModel());
        }else{
            comboPatient.setSelectedItem(receipt.getPatient());
            tblItems.setModel(new MyReceipItemModel(receipt.getItems()));
            System.out.println("U PREPARE "+oldItems);
        }
        
    }

    private boolean checkQuantity(int quantity, Medicine m) {
        if(quantity>m.getQuantity()){
            return false;
        }
        List<ReceiptItem> items1 = ((MyReceipItemModel)tblItems.getModel()).getItems();
        for (ReceiptItem i : items1) {
            if(i.getMedicine().equals(m)){
                if(i.getAmount()+quantity>m.getQuantity()){
                    return false;
                }
            }
        }
        return true;
    }

    private boolean updateMedicineQuantity(List<ReceiptItem> items1,List<Medicine> medicines) throws Exception {
        for(ReceiptItem i : items1){
            for (Medicine m : medicines) {
                if(i.getMedicine().getJKL().equals(m.getJKL())){
                    if(i.getAmount()>m.getQuantity()){
                        return true;
                    }else{
                    m.setQuantity(m.getQuantity()-i.getAmount());
                    try {
                        Communication.getInstance().editMedicine(m);
                    } catch (Exception ex) {
                        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    }
                }
            }
        }
        return false;
    }

    private void updateOrderNo() {
        newItems = ((MyReceipItemModel)tblItems.getModel()).getItems();
        for(int i=0;i<newItems.size();i++){
            newItems.get(i).setOrderNumber(Long.valueOf(i+1+""));
        }
        tblItems.setModel(new MyReceipItemModel(newItems));
    }
    
    private void handleSaleStat(List<ReceiptItem> items){
        boolean check=false;
    try {
        List<SaleStatistics> statistics = Communication.getInstance().getSaleStatistics();
        for (ReceiptItem i : items) {
            check=false;
            for (SaleStatistics s : statistics) {
                if(s.getPharmacist().getId().equals(logged.getId()) && s.getMedicine().getJKL().equals(i.getMedicine().getJKL())){
                    s.setEarnings(s.getEarnings()+i.getPrice());
                    s.setNumber_of_sales(s.getNumber_of_sales()+i.getAmount());
                    Communication.getInstance().editSaleStatistic(s);
                    check = true;
                }
            }if(!check){
                SaleStatistics stat = new SaleStatistics(i.getMedicine(), logged, i.getAmount(), i.getAmount()*i.getPrice());
                Communication.getInstance().addSaleStatistic(stat);
            }
            
        }
        
    } catch (Exception ex) {
        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    
    public void populateTblMedicine(){
        new Thread(new Runnable() {
            @Override
            public void run() {
                while(true){
                    try {
                        List<Medicine> medicinesDB = Communication.getInstance().getMedicines("");
                        MyMedicineModel modelMed = (MyMedicineModel)tblMedicines.getModel();
                        List<Medicine> medicinesTBL = modelMed.getMedicines();
                        if(checkIfTableChanged(medicinesDB, medicinesTBL)){
                            populateTableMedicines();
                        }
                            System.out.println("RADI");
                            try {
                            Thread.sleep(4000);
                            } catch (InterruptedException ex) {
                            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } catch (Exception ex) {
                        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            
            
        }).start();
    }

    private List<ReceiptItem> checkForDeleted(List<ReceiptItem> items) {
        List<ReceiptItem> items1 = items;
        boolean removed = true;
        for (ReceiptItem iO : oldItems) {
            for (ReceiptItem i : items1) {
                if(iO.getMedicine().getJKL().equals(i.getMedicine().getJKL())){
                    i.setAction(ItemUpdateAction.UPDATE);
                    Medicine med = i.getMedicine();
                    med.setQuantity(med.getQuantity()+(iO.getAmount()-i.getAmount()));
                    try {
                        Communication.getInstance().editMedicine(med);
                    } catch (Exception ex) {
                        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    removed=false;
                }
            }if(removed){
                iO.setAction(ItemUpdateAction.DELETE);
                items1.add(iO);
                Medicine med = iO.getMedicine();
                med.setQuantity(med.getQuantity()+iO.getAmount());
                try {
                        Communication.getInstance().editMedicine(med);
                    } catch (Exception ex) {
                        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
            removed = true;
        }
        return items1;
    }

    private List<ReceiptItem> checkForAdded(List<ReceiptItem> items) {
        List<ReceiptItem> items1 = items;
        boolean added = true;
        for (ReceiptItem i : items1) {
            for (ReceiptItem iO : oldItems) {
                if(i.getMedicine().getJKL().equals(iO.getMedicine().getJKL())){
                    added = false;
                }
            }
            if(added==true){
                i.setAction(ItemUpdateAction.ADD);
                Medicine med = i.getMedicine();
                med.setQuantity(med.getQuantity()-i.getAmount());
                try {
                        Communication.getInstance().editMedicine(med);
                    } catch (Exception ex) {
                        Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
            added = true;
        }
        return items1;
    }
    
    public boolean checkIfTableChanged(List<Medicine> medicinesDB, List<Medicine> medicinesTBL){
        for (Medicine mTBL : medicinesTBL) {
            for (Medicine mDB : medicinesDB) {
                if(mTBL.getJKL().equals(mDB.getJKL())){
                    System.out.println(mTBL.getZasticeno_ime() + " TBL "+ mTBL.getQuantity());
                    System.out.println(mDB.getZasticeno_ime() + " DB "+ mDB.getQuantity());
                    if(mTBL.getQuantity()!=mDB.getQuantity()){
                        System.out.println("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
                        return true;
                    }
                }
            }
        }
        System.out.println("false");
        return false;
    }
    
 
    
}
